name: CI

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:

jobs:
  # ---------- LINT ----------
  lint-backend:
    name: lint (backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - run: npm run lint --if-present

  lint-frontend:
    name: lint (frontend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint --if-present

  # ---------- TEST ----------
  test-backend-unit:
    name: test (backend, unit, npm test)
    runs-on: ubuntu-latest
    needs: [lint-backend]
    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rflandscaperpro
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - name: Run unit tests
        run: npm test
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: rflandscaperpro
          JWT_SECRET: testsecret

  test-backend-e2e:
    name: test (backend, e2e, npm run test:e2e)
    runs-on: ubuntu-latest
    needs: [lint-backend]
    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rflandscaperpro
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - name: Run e2e tests
        run: npm run test:e2e
        env:
          CI: true
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: rflandscaperpro
          JWT_SECRET: testsecret

  test-frontend-unit:
    name: test (frontend, unit, npm test)
    runs-on: ubuntu-latest
    needs: [lint-frontend]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: Run unit tests
        run: npm test
        env:
          CI: true

  # ---------- BUILD ----------
  build-backend:
    name: build (backend)
    runs-on: ubuntu-latest
    needs: [test-backend-unit, test-backend-e2e]
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - name: Build backend
        run: npm run build
        env:
          CI: true
      - name: Build production image
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: docker build .

  build-frontend:
    name: build (frontend)
    runs-on: ubuntu-latest
    needs: [test-frontend-unit]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: Build SSR (no prerender in PRs)
        run: npm run build:ssr:ci
        env:
          CI: true
          NODE_OPTIONS: --max_old_space_size=4096
