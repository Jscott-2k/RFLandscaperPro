services:
  db:
    image: postgres:14
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: rflandscaperpro
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rflandscaperpro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  logging:
    image: fluent/fluentd:v1.16-debian
    container_name: logserver
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
    ports:
      - "9880:9880"
    networks:
      - rflandscaperpro
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - rflandscaperpro
    restart: unless-stopped

  backend:
    image: rflandscaperpro/backend
    container_name: backend
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    working_dir: /app
    volumes:
      - ./backend:/app
      - ./shared:/shared
      - backend_node_modules:/app/node_modules
    env_file:
      - ./backend/.env.development
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      HOST: 0.0.0.0
      DB_HOST: db
      # FLUENTD_URL: http://logserver:9880   # uncomment if you ship logs to fluentd
    ports:
      - "3000:3000"
    networks:
      - rflandscaperpro
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  frontend:
    image: rflandscaperpro/frontend
    container_name: frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    volumes:
      - ./frontend:/app
      - ./shared:/shared
      - frontend_node_modules:/app/node_modules
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "200"
      NG_HOST: 0.0.0.0
    ports:
      - "4200:4200"
    networks:
      - rflandscaperpro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:4200 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - rflandscaperpro
    depends_on:
      - backend
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
    ports:
      - "3001:3000"
    environment:
      GF_LOG_LEVEL: warn
    networks:
      - rflandscaperpro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:
  backend_node_modules:
  frontend_node_modules:

networks:
  rflandscaperpro: {}
